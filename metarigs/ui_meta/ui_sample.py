import bpy
from mathutils import Color, Vector

def create(obj):
    """
    Creates a metarig sample for a Eyebrows Ui rig.

    Args:
        obj: The object to create the metarig for.

    Returns:
        A list of bones in the metarig.
    
    PS: Generated by rigify.utils.write_metarig
    """
    
    #Get Armature Data
    arm = obj.data
    
    #Setup Color Sets
    arm.rigify_colors_lock = False
    
    #Dict with color params normal, select and active
    color_sets = {
      "Dark Green": [(0, 0.10, 0.01), (0, 0.50, 0.05)],
      "Light Green": [(0, 0.50, 0.05), (0, 0.80, 0.08)],
      
      "Dark Cyan": [(0, 0.10, 0.10), (0, 0.50, 0.50)],
      "Light Cyan": [(0, 0.50, 0.50), (0, 0.80, 0.80)],
      
      "Dark Blue": [(0, 0.01, 0.10), (0, 0.05, 0.50)],
      "Light Blue": [(0, 0.05, 0.50), (0, 0.08, 0.80)],
      
      "Dark Magenta": [(0.08, 0, 0.10), (0.40, 0, 0.50)],
      "Light Magenta": [(0.40, 0, 0.50), (0.64, 0, 0.80)],
      
      "Dark Red": [(0.10, 0, 0), (0.50, 0, 0)],
      "Light Red": [(0.50, 0, 0), (0.80, 0, 0)],
      
      "Dark Orange": [(0.10, 0.02, 0), (0.50, 0.12, 0)],
      "Light Orange": [(0.50, 0.12, 0), (0.80, 0.19, 0)],
      
      "Dark Yellow": [(0.10, 0.09, 0), (0.50, 0.45, 0)],
      "Light Yellow": [(0.60, 0.43, 0), (0.80, 0.72, 0)],
      
      "Black": [(0,0,0), (0.35, 0.35,0.35)],
      "White": [(1.0,1.0,1.0), (0.7,0.7,0.7)],
    }
    
    for title, value in color_sets.items():
        
        color = arm.rigify_colors.add()
        color.name = title
        
        #set color by Color function of mathutils
        color.normal = Color(value[0])
        color.select = Color(value[1])
        color.active = Color(value[1])
        
    #Setup Bone Collection UI
    bone_col = {
      "Panels": ('Black', 1),
      "Sliders": ('White', 2),
      "Root": ('Purple', 4),
    }
    
    try:
        col = arm.collections.remove(arm.collections_all['Bones'])
    except:
        pass    
    
    for collection, (color, row) in bone_col.items():
        
        col = arm.collections.new(collection)
        col.rigify_color_set_name = color
        col.rigify_ui_row = row
        
    #Off Root Collection visibility by default
    arm.collections_all["Root"].is_visible = False
    
    #Switch Object Mode to Edit Mode
    if obj.mode != 'EDIT':
        bpy.ops.object.mode_set(mode='EDIT')    
    
    #Setup Sample Ui Bones: dict={name, slider_type, head, tail, minimal, clamp, title, fill_slider, fill_pan, collection}
    bone_list = {
    
      #Simple Sliders
      "Small": ['SMALL', (-14.5, 0, 8.5), (-14.5,0,9.5), False, 'NONE', '@name', False, False, 'Panels'],
      "Large": ['LARGE', (-12,0,8.5), (-12,0,9.5), False, 'NONE', '@name', False, False, 'Panels'],
      "Small_Minimal": ['SMALL', (-10, 0, 8.5), (-10,0,9.5), True, 'NONE', '@name', False, False, 'Panels'],
      "Large_Minimal": ['LARGE', (-7.5,0,8.5), (-7.5,0,9.5), True, 'NONE', '@name', False, False, 'Panels'],
      
      "Small_fill": ['SMALL', (-14.5, 0, 5), (-14.5,0,6), False, 'NONE', '@name', True, False, 'Panels'],
      "Large_fill": ['LARGE', (-12,0,5), (-12,0,6), False, 'NONE', '@name', True, False, 'Panels'],
      "Small_Minimal_fill": ['SMALL', (-10, 0, 5), (-10,0,6), True, 'NONE', '@name', True, False, 'Panels'],
      "Large_Minimal_fill": ['LARGE', (-7.5,0,5), (-7.5,0,6), True, 'NONE', '@name', True, False, 'Panels'],
      
      "Small_fillPan": ['SMALL', (-14.5, 0, 1.5), (-14.5,0,2.5), False, 'NONE', '@name', True, True, 'Panels'],
      "Large_fillPan": ['LARGE', (-12,0,1.5), (-12,0,2.5), False, 'NONE', '@name', True, True, 'Panels'],
    
      #Clamp Up Sliders
      "Small_clampUp": ['SMALL', (-3.5, 0, 8.5), (-3.5,0,9.5), False, 'UP', '@name', False, False, 'Panels'],
      "Large_clampUp": ['LARGE', (-1,0,8.5), (-1,0,9.5), False, 'UP', '@name', False, False, 'Panels'],
      "Small_clampUp_Minimal": ['SMALL', (1, 0, 8.5), (1,0,9.5), True, 'UP', '@name', False, False, 'Panels'],
      "Large_clampUp_Minimal": ['LARGE', (3.5,0,8.5), (3.5,0,9.5), True, 'UP', '@name', False, False, 'Panels'],
      
      "Small_clampUp_fill": ['SMALL', (-3.5, 0, 5), (-3.5,0,6), False, 'UP', '@name', True, False, 'Panels'],
      "Large_clampUp_fill": ['LARGE', (-1,0,5), (-1,0,6), False, 'UP', '@name', True, False, 'Panels'],
      "Small_clampUp_Minimal_fill": ['SMALL', (1, 0, 5), (1,0,6), True, 'UP', '@name', True, False, 'Panels'],
      "Large_clampUp_Minimal_fill": ['LARGE', (3.5,0,5), (3.5,0,6), True, 'UP', '@name', True, False, 'Panels'],
      
      "Small_clampUp_fillPan": ['SMALL', (-3.5, 0, 1.5), (-3.5,0,2.5), False, 'UP', '@name', True, True, 'Panels'],
      "Large_clampUp_fillPan": ['LARGE', (-1,0,1.5), (-1,0,2.5), False, 'UP', '@name', True, True, 'Panels'],
    
      #Clamp Down Sliders
      "Small_clampDown": ['SMALL', (7.5, 0, 8.5), (7.5,0,9.5), False, 'DOWN', '@name', False, False, 'Panels'],
      "Large_clampDown": ['LARGE', (10,0,8.5), (10,0,9.5), False, 'DOWN', '@name', False, False, 'Panels'],
      "Small_clampDown_Minimal": ['SMALL', (12, 0, 8.5), (12,0,9.5), True, 'DOWN', '@name', False, False, 'Panels'],
      "Large_clampDown_Minimal": ['LARGE', (14.5,0,8.5), (14.5,0,9.5), True, 'DOWN', '@name', False, False, 'Panels'],
      
      "Small_clampDown_fill": ['SMALL', (7.5, 0, 5), (7.5,0,6), False, 'DOWN', '@name', True, False, 'Panels'],
      "Large_clampDown_fill": ['LARGE', (10,0,5), (10,0,6), False, 'DOWN', '@name', True, False, 'Panels'],
      "Small_clampDown_Minimal_fill": ['SMALL', (12, 0, 5), (12,0,6), True, 'DOWN', '@name', True, False, 'Panels'],
      "Large_clampDown_Minimal_fill": ['LARGE', (14.5,0,5), (14.5,0,6), True, 'DOWN', '@name', True, False, 'Panels'],
      
      "Small_clampDown_fillPan": ['SMALL', (7.5, 0, 1.5), (7.5,0,2.5), False, 'DOWN', '@name', True, True, 'Panels'],
      "Large_clampDown_fillPan": ['LARGE', (10,0,1.5), (10,0,2.5), False, 'DOWN', '@name', True, True, 'Panels'],
    
    }
    
    created_bones = []
    
    #Create Bones and Setup in Edit Mode
    for name, (slider_type, head, tail, minimal, clamp, title, fill_slider, fill_pan, collection) in bone_list.items():
        
        bone = arm.edit_bones.new(name)
        bone.head = head
        bone.tail = tail
        bone.roll = 0
        
        arm.collections_all[collection].assign(bone)
        created_bones.append(bone)
    
    #Switch Object Mode to Edit Mode
    if obj.mode != 'POSE':
        bpy.ops.object.mode_set(mode='POSE')
        
    for name, (slider_type, head, tail, minimal, clamp, title, fill_slider, fill_pan, collection) in bone_list.items():
        
        bone = obj.pose.bones[name]
        
        bone.rigify_type = "ui.slider"
        bone.rigify_parameters.slider_type = slider_type
        bone.rigify_parameters.minimal_design = minimal
        bone.rigify_parameters.clamp_up_down = clamp
        bone.rigify_parameters.custom_title = '@name'
        bone.rigify_parameters.fill_slider = fill_slider
        bone.rigify_parameters.fill_pan = fill_pan
        
        bone.rigify_parameters.slider_layers_extra = True
        bone.rigify_parameters.slider_coll_refs.add()
        bone.rigify_parameters.slider_coll_refs[0].set_collection(arm.collections_all['Sliders'])
    
    #Switch Object Mode to Edit Mode
    if obj.mode != 'OBJECT':
        bpy.ops.object.mode_set(mode='OBJECT')
            
    return created_bones

if __name__ == "__main__":
    create(bpy.context.active_object)